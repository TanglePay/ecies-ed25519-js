/**
                       * @license
                       * author: 
                       * ecies-ed25519-js.js v0.0.1
                       * Released under the MIT license.
                       */
!function(t,e){"use strict";var r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function i(t){if(t.__esModule)return t;var e=t.default;if("function"==typeof e){var r=function t(){if(this instanceof t){var r=[null];return r.push.apply(r,arguments),new(Function.bind.apply(e,r))}return e.apply(this,arguments)};r.prototype=e.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(t).forEach((function(e){var n=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,n.get?n:{enumerable:!0,get:function(){return t[e]}})})),r}var o="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},s=[],a=[],c="undefined"!=typeof Uint8Array?Uint8Array:Array,h=!1;function u(){h=!0;for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0;e<64;++e)s[e]=t[e],a[t.charCodeAt(e)]=e;a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63}function f(t,e,r){for(var n,i,o=[],a=e;a<r;a+=3)n=(t[a]<<16)+(t[a+1]<<8)+t[a+2],o.push(s[(i=n)>>18&63]+s[i>>12&63]+s[i>>6&63]+s[63&i]);return o.join("")}function l(t){var e;h||u();for(var r=t.length,n=r%3,i="",o=[],a=16383,c=0,l=r-n;c<l;c+=a)o.push(f(t,c,c+a>l?l:c+a));return 1===n?(e=t[r-1],i+=s[e>>2],i+=s[e<<4&63],i+="=="):2===n&&(e=(t[r-2]<<8)+t[r-1],i+=s[e>>10],i+=s[e>>4&63],i+=s[e<<2&63],i+="="),o.push(i),o.join("")}function p(t,e,r,n,i){var o,s,a=8*i-n-1,c=(1<<a)-1,h=c>>1,u=-7,f=r?i-1:0,l=r?-1:1,p=t[e+f];for(f+=l,o=p&(1<<-u)-1,p>>=-u,u+=a;u>0;o=256*o+t[e+f],f+=l,u-=8);for(s=o&(1<<-u)-1,o>>=-u,u+=n;u>0;s=256*s+t[e+f],f+=l,u-=8);if(0===o)o=1-h;else{if(o===c)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),o-=h}return(p?-1:1)*s*Math.pow(2,o-n)}function d(t,e,r,n,i,o){var s,a,c,h=8*o-i-1,u=(1<<h)-1,f=u>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=u):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+f>=1?l/c:l*Math.pow(2,1-f))*c>=2&&(s++,c/=2),s+f>=u?(a=0,s=u):s+f>=1?(a=(e*c-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[r+p]=255&a,p+=d,a/=256,i-=8);for(s=s<<i|a,h+=i;h>0;t[r+p]=255&s,p+=d,s/=256,h-=8);t[r+p-d]|=128*y}var y={}.toString,g=Array.isArray||function(t){return"[object Array]"==y.call(t)};B.TYPED_ARRAY_SUPPORT=void 0===o.TYPED_ARRAY_SUPPORT||o.TYPED_ARRAY_SUPPORT;var v=_();function _(){return B.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function w(t,e){if(_()<e)throw new RangeError("Invalid typed array length");return B.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=B.prototype:(null===t&&(t=new B(e)),t.length=e),t}function B(t,e,r){if(!(B.TYPED_ARRAY_SUPPORT||this instanceof B))return new B(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return x(this,t)}return b(this,t,e,r)}function b(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);B.TYPED_ARRAY_SUPPORT?(t=e).__proto__=B.prototype:t=A(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!B.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|k(e,r);t=w(t,n);var i=t.write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(E(e)){var r=0|S(e.length);return 0===(t=w(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?w(t,0):A(t,e);if("Buffer"===e.type&&g(e.data))return A(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function m(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function x(t,e){if(m(e),t=w(t,e<0?0:0|S(e)),!B.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function A(t,e){var r=e.length<0?0:0|S(e.length);t=w(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function S(t){if(t>=_())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+_().toString(16)+" bytes");return 0|t}function E(t){return!(null==t||!t._isBuffer)}function k(t,e){if(E(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return tt(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return et(t).length;default:if(n)return tt(t).length;e=(""+e).toLowerCase(),n=!0}}function R(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return N(this,e,r);case"utf8":case"utf-8":return F(this,e,r);case"ascii":return Y(this,e,r);case"latin1":case"binary":return K(this,e,r);case"base64":return O(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return W(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function P(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function C(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=B.from(e,n)),E(e))return 0===e.length?-1:H(t,e,r,n,i);if("number"==typeof e)return e&=255,B.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):H(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function H(t,e,r,n,i){var o,s=1,a=t.length,c=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,r/=2}function h(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var u=-1;for(o=r;o<a;o++)if(h(t,o)===h(e,-1===u?0:o-u)){if(-1===u&&(u=o),o-u+1===c)return u*s}else-1!==u&&(o-=o-u),u=-1}else for(r+c>a&&(r=a-c),o=r;o>=0;o--){for(var f=!0,l=0;l<c;l++)if(h(t,o+l)!==h(e,l)){f=!1;break}if(f)return o}return-1}function z(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function T(t,e,r,n){return rt(tt(e,t.length-r),t,r,n)}function D(t,e,r,n){return rt(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function M(t,e,r,n){return D(t,e,r,n)}function U(t,e,r,n){return rt(et(e),t,r,n)}function I(t,e,r,n){return rt(function(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=(r=t.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function O(t,e,r){return 0===e&&r===t.length?l(t):l(t.slice(e,r))}function F(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,c,h=t[i],u=null,f=h>239?4:h>223?3:h>191?2:1;if(i+f<=r)switch(f){case 1:h<128&&(u=h);break;case 2:128==(192&(o=t[i+1]))&&(c=(31&h)<<6|63&o)>127&&(u=c);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(c=(15&h)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(u=c);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(c=(15&h)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(u=c)}null===u?(u=65533,f=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),i+=f}return function(t){var e=t.length;if(e<=L)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=L));return r}(n)}B.poolSize=8192,B._augment=function(t){return t.__proto__=B.prototype,t},B.from=function(t,e,r){return b(null,t,e,r)},B.TYPED_ARRAY_SUPPORT&&(B.prototype.__proto__=Uint8Array.prototype,B.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&B[Symbol.species]),B.alloc=function(t,e,r){return function(t,e,r,n){return m(e),e<=0?w(t,e):void 0!==r?"string"==typeof n?w(t,e).fill(r,n):w(t,e).fill(r):w(t,e)}(null,t,e,r)},B.allocUnsafe=function(t){return x(null,t)},B.allocUnsafeSlow=function(t){return x(null,t)},B.isBuffer=nt,B.compare=function(t,e){if(!E(t)||!E(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},B.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},B.concat=function(t,e){if(!g(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return B.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=B.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var o=t[r];if(!E(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},B.byteLength=k,B.prototype._isBuffer=!0,B.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)P(this,e,e+1);return this},B.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)P(this,e,e+3),P(this,e+1,e+2);return this},B.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)P(this,e,e+7),P(this,e+1,e+6),P(this,e+2,e+5),P(this,e+3,e+4);return this},B.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?F(this,0,t):R.apply(this,arguments)},B.prototype.equals=function(t){if(!E(t))throw new TypeError("Argument must be a Buffer");return this===t||0===B.compare(this,t)},B.prototype.inspect=function(){var t="";return this.length>0&&(t=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(t+=" ... ")),"<Buffer "+t+">"},B.prototype.compare=function(t,e,r,n,i){if(!E(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(o,s),c=this.slice(n,i),h=t.slice(e,r),u=0;u<a;++u)if(c[u]!==h[u]){o=c[u],s=h[u];break}return o<s?-1:s<o?1:0},B.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},B.prototype.indexOf=function(t,e,r){return C(this,t,e,r,!0)},B.prototype.lastIndexOf=function(t,e,r){return C(this,t,e,r,!1)},B.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return z(this,t,e,r);case"utf8":case"utf-8":return T(this,t,e,r);case"ascii":return D(this,t,e,r);case"latin1":case"binary":return M(this,t,e,r);case"base64":return U(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},B.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var L=4096;function Y(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function K(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function N(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=Q(t[o]);return i}function W(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function j(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function X(t,e,r,n,i,o){if(!E(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function Z(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function V(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function q(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function G(t,e,r,n,i){return i||q(t,0,r,4),d(t,e,r,n,23,4),r+4}function J(t,e,r,n,i){return i||q(t,0,r,8),d(t,e,r,n,52,8),r+8}B.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),B.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=B.prototype;else{var i=e-t;r=new B(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+t]}return r},B.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||j(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},B.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||j(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},B.prototype.readUInt8=function(t,e){return e||j(t,1,this.length),this[t]},B.prototype.readUInt16LE=function(t,e){return e||j(t,2,this.length),this[t]|this[t+1]<<8},B.prototype.readUInt16BE=function(t,e){return e||j(t,2,this.length),this[t]<<8|this[t+1]},B.prototype.readUInt32LE=function(t,e){return e||j(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},B.prototype.readUInt32BE=function(t,e){return e||j(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},B.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||j(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},B.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||j(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},B.prototype.readInt8=function(t,e){return e||j(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},B.prototype.readInt16LE=function(t,e){e||j(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},B.prototype.readInt16BE=function(t,e){e||j(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},B.prototype.readInt32LE=function(t,e){return e||j(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},B.prototype.readInt32BE=function(t,e){return e||j(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},B.prototype.readFloatLE=function(t,e){return e||j(t,4,this.length),p(this,t,!0,23,4)},B.prototype.readFloatBE=function(t,e){return e||j(t,4,this.length),p(this,t,!1,23,4)},B.prototype.readDoubleLE=function(t,e){return e||j(t,8,this.length),p(this,t,!0,52,8)},B.prototype.readDoubleBE=function(t,e){return e||j(t,8,this.length),p(this,t,!1,52,8)},B.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||X(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},B.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||X(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},B.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,1,255,0),B.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},B.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,2,65535,0),B.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):Z(this,t,e,!0),e+2},B.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,2,65535,0),B.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):Z(this,t,e,!1),e+2},B.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,4,4294967295,0),B.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):V(this,t,e,!0),e+4},B.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,4,4294967295,0),B.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):V(this,t,e,!1),e+4},B.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);X(this,t,e,r,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},B.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);X(this,t,e,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},B.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,1,127,-128),B.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},B.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,2,32767,-32768),B.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):Z(this,t,e,!0),e+2},B.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,2,32767,-32768),B.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):Z(this,t,e,!1),e+2},B.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,4,2147483647,-2147483648),B.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):V(this,t,e,!0),e+4},B.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||X(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),B.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):V(this,t,e,!1),e+4},B.prototype.writeFloatLE=function(t,e,r){return G(this,t,e,!0,r)},B.prototype.writeFloatBE=function(t,e,r){return G(this,t,e,!1,r)},B.prototype.writeDoubleLE=function(t,e,r){return J(this,t,e,!0,r)},B.prototype.writeDoubleBE=function(t,e,r){return J(this,t,e,!1,r)},B.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,o=n-r;if(this===t&&r<e&&e<n)for(i=o-1;i>=0;--i)t[i+e]=this[i+r];else if(o<1e3||!B.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+o),e);return o},B.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!B.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(o=e;o<r;++o)this[o]=t;else{var s=E(t)?t:tt(new B(t,n).toString()),a=s.length;for(o=0;o<r-e;++o)this[o+e]=s[o%a]}return this};var $=/[^+\/0-9A-Za-z-_]/g;function Q(t){return t<16?"0"+t.toString(16):t.toString(16)}function tt(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function et(t){return function(t){var e,r,n,i,o,s;h||u();var f=t.length;if(f%4>0)throw new Error("Invalid string. Length must be a multiple of 4");o="="===t[f-2]?2:"="===t[f-1]?1:0,s=new c(3*f/4-o),n=o>0?f-4:f;var l=0;for(e=0,r=0;e<n;e+=4,r+=3)i=a[t.charCodeAt(e)]<<18|a[t.charCodeAt(e+1)]<<12|a[t.charCodeAt(e+2)]<<6|a[t.charCodeAt(e+3)],s[l++]=i>>16&255,s[l++]=i>>8&255,s[l++]=255&i;return 2===o?(i=a[t.charCodeAt(e)]<<2|a[t.charCodeAt(e+1)]>>4,s[l++]=255&i):1===o&&(i=a[t.charCodeAt(e)]<<10|a[t.charCodeAt(e+1)]<<4|a[t.charCodeAt(e+2)]>>2,s[l++]=i>>8&255,s[l++]=255&i),s}(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace($,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function rt(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function nt(t){return null!=t&&(!!t._isBuffer||it(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&it(t.slice(0,0))}(t))}function it(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}var ot=i(Object.freeze({__proto__:null,Buffer:B,INSPECT_MAX_BYTES:50,SlowBuffer:function(t){return+t!=t&&(t=0),B.alloc(+t)},isBuffer:nt,kMaxLength:v})),st=i(Object.freeze({__proto__:null,default:{}}));const{Buffer:at}=ot,{createHash:ct,createHmac:ht}=st,ut={},ft=t=>{switch(t){case"sha256":case"sha3-256":case"blake2s256":return 32;case"sha512":case"sha3-512":case"blake2b512":return 64;case"sha224":case"sha3-224":return 28;case"sha384":case"sha3-384":return 48;case"sha1":return 20;case"md5":return 16;default:{let e=ut[t];return void 0===e&&(e=ct(t).digest().length,ut[t]=e),e}}},lt=(t,e,r,n)=>{const i=at.isBuffer(r)?r:at.from(r),o=n&&n.length?at.from(n):at.alloc(e,0);return ht(t,o).update(i).digest()},pt=(t,e,r,n,i)=>{const o=at.isBuffer(i)?i:at.from(i||""),s=o.length,a=Math.ceil(n/e);if(a>255)throw new Error(`OKM length ${n} is too long for ${t} hash`);const c=at.alloc(e*a+s+1);for(let n=1,i=0,h=0;n<=a;++n)o.copy(c,h),c[h+s]=n,ht(t,r).update(c.slice(i,h+s+1)).digest().copy(c,h),i=h,h+=e;return c.slice(0,n)};function dt(t,e,{salt:r="",info:n="",hash:i="SHA-256"}={}){i=i.toLowerCase().replace("-","");const o=ft(i),s=lt(i,o,t,r);return pt(i,o,s,e,n)}Object.defineProperties(dt,{hash_length:{configurable:!1,enumerable:!1,writable:!1,value:ft},extract:{configurable:!1,enumerable:!1,writable:!1,value:lt},expand:{configurable:!1,enumerable:!1,writable:!1,value:pt}});var yt=n(dt);
/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
const gt=2n**255n-19n,vt=2n**252n+27742317777372353535851937790883648493n,_t=0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an,wt=0x6666666666666666666666666666666666666666666666666666666666666658n,Bt={a:-1n,d:37095705934669439343138083508754565189542113879843219016388785533085940283555n,p:gt,n:vt,h:8,Gx:_t,Gy:wt},bt=(t="")=>{throw new Error(t)},mt=t=>"string"==typeof t,xt=(t,e)=>!(t instanceof Uint8Array)||"number"==typeof e&&e>0&&t.length!==e?bt("Uint8Array expected"):t,At=t=>new Uint8Array(t),St=(t,e=gt)=>{let r=t%e;return r>=0n?r:e+r},Et=t=>t instanceof Rt?t:bt("Point expected");let kt;class Rt{constructor(t,e,r,n){this.ex=t,this.ey=e,this.ez=r,this.et=n}static fromAffine(t){return new Rt(t.x,t.y,1n,St(t.x*t.y))}static fromHex(t,e=!0){const{d:r}=Bt;var n,i;i=32;const o=(t=xt(mt(n=t)?Tt(n):At(n),i)).slice();o[31]=-129&t[31];const s=Mt(o);0n===s||(!e||0n<s&&s<gt||bt("bad y coord 1"),e||0n<s&&s<2n**256n||bt("bad y coord 2"));const a=St(s*s),c=St(a-1n),h=St(r*a+1n);let{isValid:u,value:f}=Lt(c,h);u||bt("bad y coordinate 3");const l=1n===(1n&f);return 0!=(128&t[31])!==l&&(f=St(-f)),new Rt(f,s,1n,St(f*s))}get x(){return this.toAffine().x}get y(){return this.toAffine().y}equals(t){const{ex:e,ey:r,ez:n}=this,{ex:i,ey:o,ez:s}=Et(t),a=St(e*s),c=St(i*n),h=St(r*s),u=St(o*n);return a===c&&h===u}is0(){return this.equals(Ct)}negate(){return new Rt(St(-this.ex),this.ey,this.ez,St(-this.et))}double(){const{ex:t,ey:e,ez:r}=this,{a:n}=Bt,i=St(t*t),o=St(e*e),s=St(2n*St(r*r)),a=St(n*i),c=t+e,h=St(St(c*c)-i-o),u=a+o,f=u-s,l=a-o,p=St(h*f),d=St(u*l),y=St(h*l),g=St(f*u);return new Rt(p,d,g,y)}add(t){const{ex:e,ey:r,ez:n,et:i}=this,{ex:o,ey:s,ez:a,et:c}=Et(t),{a:h,d:u}=Bt,f=St(e*o),l=St(r*s),p=St(i*u*c),d=St(n*a),y=St((e+r)*(o+s)-f-l),g=St(d-p),v=St(d+p),_=St(l-h*f),w=St(y*g),B=St(v*_),b=St(y*_),m=St(g*v);return new Rt(w,B,m,b)}mul(t,e=!0){if(0n===t)return!0===e?bt("cannot multiply by 0"):Ct;if("bigint"==typeof t&&0n<t&&t<vt||bt("invalid scalar, must be < L"),!e&&this.is0()||1n===t)return this;if(this.equals(Pt))return Wt(t).p;let r=Ct,n=Pt;for(let i=this;t>0n;i=i.double(),t>>=1n)1n&t?r=r.add(i):e&&(n=n.add(i));return r}multiply(t){return this.mul(t)}clearCofactor(){return this.mul(BigInt(Bt.h),!1)}isSmallOrder(){return this.clearCofactor().is0()}isTorsionFree(){let t=this.mul(vt/2n,!1).double();return vt%2n&&(t=t.add(this)),t.is0()}toAffine(){const{ex:t,ey:e,ez:r}=this;if(this.is0())return{x:0n,y:0n};const n=It(r);return 1n!==St(r*n)&&bt("invalid inverse"),{x:St(t*n),y:St(e*n)}}toRawBytes(){const{x:t,y:e}=this.toAffine(),r=Dt(e);return r[31]|=1n&t?128:0,r}toHex(){return zt(this.toRawBytes())}}Rt.BASE=new Rt(_t,wt,1n,St(_t*wt)),Rt.ZERO=new Rt(0n,1n,1n,0n);const{BASE:Pt,ZERO:Ct}=Rt,Ht=(t,e)=>t.toString(16).padStart(e,"0"),zt=t=>Array.from(t).map((t=>Ht(t,2))).join(""),Tt=t=>{const e=t.length;(!mt(t)||e%2)&&bt("hex invalid 1");const r=At(e/2);for(let e=0;e<r.length;e++){const n=2*e,i=t.slice(n,n+2),o=Number.parseInt(i,16);(Number.isNaN(o)||o<0)&&bt("hex invalid 2"),r[e]=o}return r},Dt=t=>Tt(Ht(t,64)).reverse(),Mt=t=>BigInt("0x"+zt(At(xt(t)).reverse())),Ut=(...t)=>{const e=At(t.reduce(((t,e)=>t+xt(e).length),0));let r=0;return t.forEach((t=>{e.set(t,r),r+=t.length})),e},It=(t,e=gt)=>{(0n===t||e<=0n)&&bt("no inverse n="+t+" mod="+e);let r=St(t,e),n=e,i=0n,o=1n;for(;0n!==r;){const t=n%r,e=i-o*(n/r);n=r,r=t,i=o,o=e}return 1n===n?St(i,e):bt("no inverse")},Ot=(t,e)=>{let r=t;for(;e-- >0n;)r*=r,r%=gt;return r},Ft=19681161376707505956807079304988542015446066515923890162744021073123829784752n,Lt=(t,e)=>{const r=St(e*e*e),n=(t=>{const e=t*t%gt*t%gt,r=Ot(e,2n)*e%gt,n=Ot(r,1n)*t%gt,i=Ot(n,5n)*n%gt,o=Ot(i,10n)*i%gt,s=Ot(o,20n)*o%gt,a=Ot(s,40n)*s%gt,c=Ot(a,80n)*a%gt,h=Ot(c,80n)*a%gt,u=Ot(h,10n)*i%gt;return{pow_p_5_8:Ot(u,2n)*t%gt,b2:e}})(t*St(r*r*e)).pow_p_5_8;let i=St(t*r*n);const o=St(e*i*i),s=i,a=St(i*Ft),c=o===t,h=o===St(-t),u=o===St(-t*Ft);return c&&(i=s),(h||u)&&(i=a),1n===(1n&St(i))&&(i=St(-i)),{isValid:c||h,value:i}};let Yt;const Kt=()=>"object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,Nt={bytesToHex:zt,hexToBytes:Tt,concatBytes:Ut,mod:St,invert:It,randomBytes:t=>{const e=Kt();return e||bt("crypto.getRandomValues must be defined"),e.getRandomValues(At(t))},sha512Async:async(...t)=>{const e=Kt();e||bt("crypto.subtle or etc.sha512Async must be defined");const r=Ut(...t);return At(await e.subtle.digest("SHA-512",r.buffer))},sha512Sync:void 0};Object.defineProperties(Nt,{sha512Sync:{configurable:!1,get:()=>Yt,set(t){Yt||(Yt=t)}}});const Wt=t=>{const e=kt||(kt=(()=>{const t=[];let e=Pt,r=e;for(let n=0;n<33;n++){r=e,t.push(r);for(let n=1;n<128;n++)r=r.add(e),t.push(r);e=r.double()}return t})()),r=(t,e)=>{let r=e.negate();return t?r:e};let n=Ct,i=Pt;const o=BigInt(255),s=BigInt(8);for(let a=0;a<33;a++){const c=128*a;let h=Number(t&o);t>>=s,h>128&&(h-=256,t+=1n);const u=c,f=c+Math.abs(h)-1,l=a%2!=0,p=h<0;0===h?i=i.add(r(l,e[u])):n=n.add(r(p,e[f]))}return{p:n,f:i}};var jt={exports:{}};var Xt,Zt={exports:{}};function Vt(){return Xt||(Xt=1,Zt.exports=function(){var t=t||function(t,e){var n;if("undefined"!=typeof window&&window.crypto&&(n=window.crypto),"undefined"!=typeof self&&self.crypto&&(n=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(n=globalThis.crypto),!n&&"undefined"!=typeof window&&window.msCrypto&&(n=window.msCrypto),!n&&void 0!==r&&r.crypto&&(n=r.crypto),!n)try{n=st}catch(t){}var i=function(){if(n){if("function"==typeof n.getRandomValues)try{return n.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof n.randomBytes)try{return n.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function t(){}return function(e){var r;return t.prototype=e,r=new t,t.prototype=null,r}}(),s={},a=s.lib={},c=a.Base={extend:function(t){var e=o(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},h=a.WordArray=c.extend({init:function(t,r){t=this.words=t||[],this.sigBytes=r!=e?r:4*t.length},toString:function(t){return(t||f).stringify(this)},concat:function(t){var e=this.words,r=t.words,n=this.sigBytes,i=t.sigBytes;if(this.clamp(),n%4)for(var o=0;o<i;o++){var s=r[o>>>2]>>>24-o%4*8&255;e[n+o>>>2]|=s<<24-(n+o)%4*8}else for(var a=0;a<i;a+=4)e[n+a>>>2]=r[a>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,r=this.sigBytes;e[r>>>2]&=4294967295<<32-r%4*8,e.length=t.ceil(r/4)},clone:function(){var t=c.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],r=0;r<t;r+=4)e.push(i());return new h.init(e,t)}}),u=s.enc={},f=u.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i++){var o=e[i>>>2]>>>24-i%4*8&255;n.push((o>>>4).toString(16)),n.push((15&o).toString(16))}return n.join("")},parse:function(t){for(var e=t.length,r=[],n=0;n<e;n+=2)r[n>>>3]|=parseInt(t.substr(n,2),16)<<24-n%8*4;return new h.init(r,e/2)}},l=u.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i++){var o=e[i>>>2]>>>24-i%4*8&255;n.push(String.fromCharCode(o))}return n.join("")},parse:function(t){for(var e=t.length,r=[],n=0;n<e;n++)r[n>>>2]|=(255&t.charCodeAt(n))<<24-n%4*8;return new h.init(r,e)}},p=u.Utf8={stringify:function(t){try{return decodeURIComponent(escape(l.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return l.parse(unescape(encodeURIComponent(t)))}},d=a.BufferedBlockAlgorithm=c.extend({reset:function(){this._data=new h.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=p.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var r,n=this._data,i=n.words,o=n.sigBytes,s=this.blockSize,a=o/(4*s),c=(a=e?t.ceil(a):t.max((0|a)-this._minBufferSize,0))*s,u=t.min(4*c,o);if(c){for(var f=0;f<c;f+=s)this._doProcessBlock(i,f);r=i.splice(0,c),n.sigBytes-=u}return new h.init(r,u)},clone:function(){var t=c.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});a.Hasher=d.extend({cfg:c.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,r){return new t.init(r).finalize(e)}},_createHmacHelper:function(t){return function(e,r){return new y.HMAC.init(t,r).finalize(e)}}});var y=s.algo={};return s}(Math);return t}()),Zt.exports}var qt,Gt={exports:{}};function Jt(){return qt||(qt=1,Gt.exports=function(t){return n=(r=t).lib,i=n.Base,o=n.WordArray,(s=r.x64={}).Word=i.extend({init:function(t,e){this.high=t,this.low=e}}),s.WordArray=i.extend({init:function(t,r){t=this.words=t||[],this.sigBytes=r!=e?r:8*t.length},toX32:function(){for(var t=this.words,e=t.length,r=[],n=0;n<e;n++){var i=t[n];r.push(i.high),r.push(i.low)}return o.create(r,this.sigBytes)},clone:function(){for(var t=i.clone.call(this),e=t.words=this.words.slice(0),r=e.length,n=0;n<r;n++)e[n]=e[n].clone();return t}}),t;var e,r,n,i,o,s}(Vt())),Gt.exports}var $t,Qt={exports:{}};function te(){return $t||($t=1,Qt.exports=function(t){return function(){if("function"==typeof ArrayBuffer){var e=t.lib.WordArray,r=e.init,n=e.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var e=t.byteLength,n=[],i=0;i<e;i++)n[i>>>2]|=t[i]<<24-i%4*8;r.call(this,n,e)}else r.apply(this,arguments)};n.prototype=e}}(),t.lib.WordArray}(Vt())),Qt.exports}var ee,re={exports:{}};function ne(){return ee||(ee=1,re.exports=function(t){return function(){var e=t,r=e.lib.WordArray,n=e.enc;function i(t){return t<<8&4278255360|t>>>8&16711935}n.Utf16=n.Utf16BE={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],i=0;i<r;i+=2){var o=e[i>>>2]>>>16-i%4*8&65535;n.push(String.fromCharCode(o))}return n.join("")},parse:function(t){for(var e=t.length,n=[],i=0;i<e;i++)n[i>>>1]|=t.charCodeAt(i)<<16-i%2*16;return r.create(n,2*e)}},n.Utf16LE={stringify:function(t){for(var e=t.words,r=t.sigBytes,n=[],o=0;o<r;o+=2){var s=i(e[o>>>2]>>>16-o%4*8&65535);n.push(String.fromCharCode(s))}return n.join("")},parse:function(t){for(var e=t.length,n=[],o=0;o<e;o++)n[o>>>1]|=i(t.charCodeAt(o)<<16-o%2*16);return r.create(n,2*e)}}}(),t.enc.Utf16}(Vt())),re.exports}var ie,oe={exports:{}};function se(){return ie||(ie=1,oe.exports=function(t){return function(){var e=t,r=e.lib.WordArray;function n(t,e,n){for(var i=[],o=0,s=0;s<e;s++)if(s%4){var a=n[t.charCodeAt(s-1)]<<s%4*2|n[t.charCodeAt(s)]>>>6-s%4*2;i[o>>>2]|=a<<24-o%4*8,o++}return r.create(i,o)}e.enc.Base64={stringify:function(t){var e=t.words,r=t.sigBytes,n=this._map;t.clamp();for(var i=[],o=0;o<r;o+=3)for(var s=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,a=0;a<4&&o+.75*a<r;a++)i.push(n.charAt(s>>>6*(3-a)&63));var c=n.charAt(64);if(c)for(;i.length%4;)i.push(c);return i.join("")},parse:function(t){var e=t.length,r=this._map,i=this._reverseMap;if(!i){i=this._reverseMap=[];for(var o=0;o<r.length;o++)i[r.charCodeAt(o)]=o}var s=r.charAt(64);if(s){var a=t.indexOf(s);-1!==a&&(e=a)}return n(t,e,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),t.enc.Base64}(Vt())),oe.exports}var ae,ce={exports:{}};function he(){return ae||(ae=1,ce.exports=function(t){return function(){var e=t,r=e.lib.WordArray;function n(t,e,n){for(var i=[],o=0,s=0;s<e;s++)if(s%4){var a=n[t.charCodeAt(s-1)]<<s%4*2|n[t.charCodeAt(s)]>>>6-s%4*2;i[o>>>2]|=a<<24-o%4*8,o++}return r.create(i,o)}e.enc.Base64url={stringify:function(t,e=!0){var r=t.words,n=t.sigBytes,i=e?this._safe_map:this._map;t.clamp();for(var o=[],s=0;s<n;s+=3)for(var a=(r[s>>>2]>>>24-s%4*8&255)<<16|(r[s+1>>>2]>>>24-(s+1)%4*8&255)<<8|r[s+2>>>2]>>>24-(s+2)%4*8&255,c=0;c<4&&s+.75*c<n;c++)o.push(i.charAt(a>>>6*(3-c)&63));var h=i.charAt(64);if(h)for(;o.length%4;)o.push(h);return o.join("")},parse:function(t,e=!0){var r=t.length,i=e?this._safe_map:this._map,o=this._reverseMap;if(!o){o=this._reverseMap=[];for(var s=0;s<i.length;s++)o[i.charCodeAt(s)]=s}var a=i.charAt(64);if(a){var c=t.indexOf(a);-1!==c&&(r=c)}return n(t,r,o)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"}}(),t.enc.Base64url}(Vt())),ce.exports}var ue,fe={exports:{}};function le(){return ue||(ue=1,fe.exports=function(t){return function(e){var r=t,n=r.lib,i=n.WordArray,o=n.Hasher,s=r.algo,a=[];!function(){for(var t=0;t<64;t++)a[t]=4294967296*e.abs(e.sin(t+1))|0}();var c=s.MD5=o.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var n=e+r,i=t[n];t[n]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var o=this._hash.words,s=t[e+0],c=t[e+1],p=t[e+2],d=t[e+3],y=t[e+4],g=t[e+5],v=t[e+6],_=t[e+7],w=t[e+8],B=t[e+9],b=t[e+10],m=t[e+11],x=t[e+12],A=t[e+13],S=t[e+14],E=t[e+15],k=o[0],R=o[1],P=o[2],C=o[3];k=h(k,R,P,C,s,7,a[0]),C=h(C,k,R,P,c,12,a[1]),P=h(P,C,k,R,p,17,a[2]),R=h(R,P,C,k,d,22,a[3]),k=h(k,R,P,C,y,7,a[4]),C=h(C,k,R,P,g,12,a[5]),P=h(P,C,k,R,v,17,a[6]),R=h(R,P,C,k,_,22,a[7]),k=h(k,R,P,C,w,7,a[8]),C=h(C,k,R,P,B,12,a[9]),P=h(P,C,k,R,b,17,a[10]),R=h(R,P,C,k,m,22,a[11]),k=h(k,R,P,C,x,7,a[12]),C=h(C,k,R,P,A,12,a[13]),P=h(P,C,k,R,S,17,a[14]),k=u(k,R=h(R,P,C,k,E,22,a[15]),P,C,c,5,a[16]),C=u(C,k,R,P,v,9,a[17]),P=u(P,C,k,R,m,14,a[18]),R=u(R,P,C,k,s,20,a[19]),k=u(k,R,P,C,g,5,a[20]),C=u(C,k,R,P,b,9,a[21]),P=u(P,C,k,R,E,14,a[22]),R=u(R,P,C,k,y,20,a[23]),k=u(k,R,P,C,B,5,a[24]),C=u(C,k,R,P,S,9,a[25]),P=u(P,C,k,R,d,14,a[26]),R=u(R,P,C,k,w,20,a[27]),k=u(k,R,P,C,A,5,a[28]),C=u(C,k,R,P,p,9,a[29]),P=u(P,C,k,R,_,14,a[30]),k=f(k,R=u(R,P,C,k,x,20,a[31]),P,C,g,4,a[32]),C=f(C,k,R,P,w,11,a[33]),P=f(P,C,k,R,m,16,a[34]),R=f(R,P,C,k,S,23,a[35]),k=f(k,R,P,C,c,4,a[36]),C=f(C,k,R,P,y,11,a[37]),P=f(P,C,k,R,_,16,a[38]),R=f(R,P,C,k,b,23,a[39]),k=f(k,R,P,C,A,4,a[40]),C=f(C,k,R,P,s,11,a[41]),P=f(P,C,k,R,d,16,a[42]),R=f(R,P,C,k,v,23,a[43]),k=f(k,R,P,C,B,4,a[44]),C=f(C,k,R,P,x,11,a[45]),P=f(P,C,k,R,E,16,a[46]),k=l(k,R=f(R,P,C,k,p,23,a[47]),P,C,s,6,a[48]),C=l(C,k,R,P,_,10,a[49]),P=l(P,C,k,R,S,15,a[50]),R=l(R,P,C,k,g,21,a[51]),k=l(k,R,P,C,x,6,a[52]),C=l(C,k,R,P,d,10,a[53]),P=l(P,C,k,R,b,15,a[54]),R=l(R,P,C,k,c,21,a[55]),k=l(k,R,P,C,w,6,a[56]),C=l(C,k,R,P,E,10,a[57]),P=l(P,C,k,R,v,15,a[58]),R=l(R,P,C,k,A,21,a[59]),k=l(k,R,P,C,y,6,a[60]),C=l(C,k,R,P,m,10,a[61]),P=l(P,C,k,R,p,15,a[62]),R=l(R,P,C,k,B,21,a[63]),o[0]=o[0]+k|0,o[1]=o[1]+R|0,o[2]=o[2]+P|0,o[3]=o[3]+C|0},_doFinalize:function(){var t=this._data,r=t.words,n=8*this._nDataBytes,i=8*t.sigBytes;r[i>>>5]|=128<<24-i%32;var o=e.floor(n/4294967296),s=n;r[15+(i+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),r[14+(i+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),t.sigBytes=4*(r.length+1),this._process();for(var a=this._hash,c=a.words,h=0;h<4;h++){var u=c[h];c[h]=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8)}return a},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});function h(t,e,r,n,i,o,s){var a=t+(e&r|~e&n)+i+s;return(a<<o|a>>>32-o)+e}function u(t,e,r,n,i,o,s){var a=t+(e&n|r&~n)+i+s;return(a<<o|a>>>32-o)+e}function f(t,e,r,n,i,o,s){var a=t+(e^r^n)+i+s;return(a<<o|a>>>32-o)+e}function l(t,e,r,n,i,o,s){var a=t+(r^(e|~n))+i+s;return(a<<o|a>>>32-o)+e}r.MD5=o._createHelper(c),r.HmacMD5=o._createHmacHelper(c)}(Math),t.MD5}(Vt())),fe.exports}var pe,de={exports:{}};function ye(){return pe||(pe=1,de.exports=function(t){return function(){var e=t,r=e.lib,n=r.WordArray,i=r.Hasher,o=e.algo,s=[],a=o.SHA1=i.extend({_doReset:function(){this._hash=new n.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],o=r[2],a=r[3],c=r[4],h=0;h<80;h++){if(h<16)s[h]=0|t[e+h];else{var u=s[h-3]^s[h-8]^s[h-14]^s[h-16];s[h]=u<<1|u>>>31}var f=(n<<5|n>>>27)+c+s[h];f+=h<20?1518500249+(i&o|~i&a):h<40?1859775393+(i^o^a):h<60?(i&o|i&a|o&a)-1894007588:(i^o^a)-899497514,c=a,a=o,o=i<<30|i>>>2,i=n,n=f}r[0]=r[0]+n|0,r[1]=r[1]+i|0,r[2]=r[2]+o|0,r[3]=r[3]+a|0,r[4]=r[4]+c|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;return e[n>>>5]|=128<<24-n%32,e[14+(n+64>>>9<<4)]=Math.floor(r/4294967296),e[15+(n+64>>>9<<4)]=r,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA1=i._createHelper(a),e.HmacSHA1=i._createHmacHelper(a)}(),t.SHA1}(Vt())),de.exports}var ge,ve={exports:{}};function _e(){return ge||(ge=1,ve.exports=function(t){return function(e){var r=t,n=r.lib,i=n.WordArray,o=n.Hasher,s=r.algo,a=[],c=[];!function(){function t(t){for(var r=e.sqrt(t),n=2;n<=r;n++)if(!(t%n))return!1;return!0}function r(t){return 4294967296*(t-(0|t))|0}for(var n=2,i=0;i<64;)t(n)&&(i<8&&(a[i]=r(e.pow(n,.5))),c[i]=r(e.pow(n,1/3)),i++),n++}();var h=[],u=s.SHA256=o.extend({_doReset:function(){this._hash=new i.init(a.slice(0))},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],o=r[2],s=r[3],a=r[4],u=r[5],f=r[6],l=r[7],p=0;p<64;p++){if(p<16)h[p]=0|t[e+p];else{var d=h[p-15],y=(d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3,g=h[p-2],v=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;h[p]=y+h[p-7]+v+h[p-16]}var _=n&i^n&o^i&o,w=(n<<30|n>>>2)^(n<<19|n>>>13)^(n<<10|n>>>22),B=l+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&u^~a&f)+c[p]+h[p];l=f,f=u,u=a,a=s+B|0,s=o,o=i,i=n,n=B+(w+_)|0}r[0]=r[0]+n|0,r[1]=r[1]+i|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+a|0,r[5]=r[5]+u|0,r[6]=r[6]+f|0,r[7]=r[7]+l|0},_doFinalize:function(){var t=this._data,r=t.words,n=8*this._nDataBytes,i=8*t.sigBytes;return r[i>>>5]|=128<<24-i%32,r[14+(i+64>>>9<<4)]=e.floor(n/4294967296),r[15+(i+64>>>9<<4)]=n,t.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});r.SHA256=o._createHelper(u),r.HmacSHA256=o._createHmacHelper(u)}(Math),t.SHA256}(Vt())),ve.exports}var we,Be={exports:{}};var be,me={exports:{}};function xe(){return be||(be=1,me.exports=function(t){return function(){var e=t,r=e.lib.Hasher,n=e.x64,i=n.Word,o=n.WordArray,s=e.algo;function a(){return i.create.apply(i,arguments)}var c=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],h=[];!function(){for(var t=0;t<80;t++)h[t]=a()}();var u=s.SHA512=r.extend({_doReset:function(){this._hash=new o.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var r=this._hash.words,n=r[0],i=r[1],o=r[2],s=r[3],a=r[4],u=r[5],f=r[6],l=r[7],p=n.high,d=n.low,y=i.high,g=i.low,v=o.high,_=o.low,w=s.high,B=s.low,b=a.high,m=a.low,x=u.high,A=u.low,S=f.high,E=f.low,k=l.high,R=l.low,P=p,C=d,H=y,z=g,T=v,D=_,M=w,U=B,I=b,O=m,F=x,L=A,Y=S,K=E,N=k,W=R,j=0;j<80;j++){var X,Z,V=h[j];if(j<16)Z=V.high=0|t[e+2*j],X=V.low=0|t[e+2*j+1];else{var q=h[j-15],G=q.high,J=q.low,$=(G>>>1|J<<31)^(G>>>8|J<<24)^G>>>7,Q=(J>>>1|G<<31)^(J>>>8|G<<24)^(J>>>7|G<<25),tt=h[j-2],et=tt.high,rt=tt.low,nt=(et>>>19|rt<<13)^(et<<3|rt>>>29)^et>>>6,it=(rt>>>19|et<<13)^(rt<<3|et>>>29)^(rt>>>6|et<<26),ot=h[j-7],st=ot.high,at=ot.low,ct=h[j-16],ht=ct.high,ut=ct.low;Z=(Z=(Z=$+st+((X=Q+at)>>>0<Q>>>0?1:0))+nt+((X+=it)>>>0<it>>>0?1:0))+ht+((X+=ut)>>>0<ut>>>0?1:0),V.high=Z,V.low=X}var ft,lt=I&F^~I&Y,pt=O&L^~O&K,dt=P&H^P&T^H&T,yt=C&z^C&D^z&D,gt=(P>>>28|C<<4)^(P<<30|C>>>2)^(P<<25|C>>>7),vt=(C>>>28|P<<4)^(C<<30|P>>>2)^(C<<25|P>>>7),_t=(I>>>14|O<<18)^(I>>>18|O<<14)^(I<<23|O>>>9),wt=(O>>>14|I<<18)^(O>>>18|I<<14)^(O<<23|I>>>9),Bt=c[j],bt=Bt.high,mt=Bt.low,xt=N+_t+((ft=W+wt)>>>0<W>>>0?1:0),At=vt+yt;N=Y,W=K,Y=F,K=L,F=I,L=O,I=M+(xt=(xt=(xt=xt+lt+((ft+=pt)>>>0<pt>>>0?1:0))+bt+((ft+=mt)>>>0<mt>>>0?1:0))+Z+((ft+=X)>>>0<X>>>0?1:0))+((O=U+ft|0)>>>0<U>>>0?1:0)|0,M=T,U=D,T=H,D=z,H=P,z=C,P=xt+(gt+dt+(At>>>0<vt>>>0?1:0))+((C=ft+At|0)>>>0<ft>>>0?1:0)|0}d=n.low=d+C,n.high=p+P+(d>>>0<C>>>0?1:0),g=i.low=g+z,i.high=y+H+(g>>>0<z>>>0?1:0),_=o.low=_+D,o.high=v+T+(_>>>0<D>>>0?1:0),B=s.low=B+U,s.high=w+M+(B>>>0<U>>>0?1:0),m=a.low=m+O,a.high=b+I+(m>>>0<O>>>0?1:0),A=u.low=A+L,u.high=x+F+(A>>>0<L>>>0?1:0),E=f.low=E+K,f.high=S+Y+(E>>>0<K>>>0?1:0),R=l.low=R+W,l.high=k+N+(R>>>0<W>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;return e[n>>>5]|=128<<24-n%32,e[30+(n+128>>>10<<5)]=Math.floor(r/4294967296),e[31+(n+128>>>10<<5)]=r,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=r.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});e.SHA512=r._createHelper(u),e.HmacSHA512=r._createHmacHelper(u)}(),t.SHA512}(Vt(),Jt())),me.exports}var Ae,Se={exports:{}};var Ee,ke={exports:{}};function Re(){return Ee||(Ee=1,ke.exports=function(t){return function(e){var r=t,n=r.lib,i=n.WordArray,o=n.Hasher,s=r.x64.Word,a=r.algo,c=[],h=[],u=[];!function(){for(var t=1,e=0,r=0;r<24;r++){c[t+5*e]=(r+1)*(r+2)/2%64;var n=(2*t+3*e)%5;t=e%5,e=n}for(t=0;t<5;t++)for(e=0;e<5;e++)h[t+5*e]=e+(2*t+3*e)%5*5;for(var i=1,o=0;o<24;o++){for(var a=0,f=0,l=0;l<7;l++){if(1&i){var p=(1<<l)-1;p<32?f^=1<<p:a^=1<<p-32}128&i?i=i<<1^113:i<<=1}u[o]=s.create(a,f)}}();var f=[];!function(){for(var t=0;t<25;t++)f[t]=s.create()}();var l=a.SHA3=o.extend({cfg:o.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new s.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var r=this._state,n=this.blockSize/2,i=0;i<n;i++){var o=t[e+2*i],s=t[e+2*i+1];o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),s=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),(R=r[i]).high^=s,R.low^=o}for(var a=0;a<24;a++){for(var l=0;l<5;l++){for(var p=0,d=0,y=0;y<5;y++)p^=(R=r[l+5*y]).high,d^=R.low;var g=f[l];g.high=p,g.low=d}for(l=0;l<5;l++){var v=f[(l+4)%5],_=f[(l+1)%5],w=_.high,B=_.low;for(p=v.high^(w<<1|B>>>31),d=v.low^(B<<1|w>>>31),y=0;y<5;y++)(R=r[l+5*y]).high^=p,R.low^=d}for(var b=1;b<25;b++){var m=(R=r[b]).high,x=R.low,A=c[b];A<32?(p=m<<A|x>>>32-A,d=x<<A|m>>>32-A):(p=x<<A-32|m>>>64-A,d=m<<A-32|x>>>64-A);var S=f[h[b]];S.high=p,S.low=d}var E=f[0],k=r[0];for(E.high=k.high,E.low=k.low,l=0;l<5;l++)for(y=0;y<5;y++){var R=r[b=l+5*y],P=f[b],C=f[(l+1)%5+5*y],H=f[(l+2)%5+5*y];R.high=P.high^~C.high&H.high,R.low=P.low^~C.low&H.low}R=r[0];var z=u[a];R.high^=z.high,R.low^=z.low}},_doFinalize:function(){var t=this._data,r=t.words;this._nDataBytes;var n=8*t.sigBytes,o=32*this.blockSize;r[n>>>5]|=1<<24-n%32,r[(e.ceil((n+1)/o)*o>>>5)-1]|=128,t.sigBytes=4*r.length,this._process();for(var s=this._state,a=this.cfg.outputLength/8,c=a/8,h=[],u=0;u<c;u++){var f=s[u],l=f.high,p=f.low;l=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8),p=16711935&(p<<8|p>>>24)|4278255360&(p<<24|p>>>8),h.push(p),h.push(l)}return new i.init(h,a)},clone:function(){for(var t=o.clone.call(this),e=t._state=this._state.slice(0),r=0;r<25;r++)e[r]=e[r].clone();return t}});r.SHA3=o._createHelper(l),r.HmacSHA3=o._createHmacHelper(l)}(Math),t.SHA3}(Vt(),Jt())),ke.exports}var Pe,Ce={exports:{}};var He,ze={exports:{}};function Te(){return He||(He=1,ze.exports=function(t){var e,r,n;r=(e=t).lib.Base,n=e.enc.Utf8,e.algo.HMAC=r.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=n.parse(e));var r=t.blockSize,i=4*r;e.sigBytes>i&&(e=t.finalize(e)),e.clamp();for(var o=this._oKey=e.clone(),s=this._iKey=e.clone(),a=o.words,c=s.words,h=0;h<r;h++)a[h]^=1549556828,c[h]^=909522486;o.sigBytes=s.sigBytes=i,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,r=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(r))}})}(Vt())),ze.exports}var De,Me={exports:{}};var Ue,Ie={exports:{}};function Oe(){return Ue||(Ue=1,Ie.exports=function(t){return r=(e=t).lib,n=r.Base,i=r.WordArray,o=e.algo,s=o.MD5,a=o.EvpKDF=n.extend({cfg:n.extend({keySize:4,hasher:s,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r,n=this.cfg,o=n.hasher.create(),s=i.create(),a=s.words,c=n.keySize,h=n.iterations;a.length<c;){r&&o.update(r),r=o.update(t).finalize(e),o.reset();for(var u=1;u<h;u++)r=o.finalize(r),o.reset();s.concat(r)}return s.sigBytes=4*c,s}}),e.EvpKDF=function(t,e,r){return a.create(r).compute(t,e)},t.EvpKDF;var e,r,n,i,o,s,a}(Vt(),ye(),Te())),Ie.exports}var Fe,Le={exports:{}};function Ye(){return Fe||(Fe=1,Le.exports=function(t){t.lib.Cipher||function(e){var r=t,n=r.lib,i=n.Base,o=n.WordArray,s=n.BufferedBlockAlgorithm,a=r.enc;a.Utf8;var c=a.Base64,h=r.algo.EvpKDF,u=n.Cipher=s.extend({cfg:i.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,r){this.cfg=this.cfg.extend(r),this._xformMode=t,this._key=e,this.reset()},reset:function(){s.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function t(t){return"string"==typeof t?w:v}return function(e){return{encrypt:function(r,n,i){return t(n).encrypt(e,r,n,i)},decrypt:function(r,n,i){return t(n).decrypt(e,r,n,i)}}}}()});n.StreamCipher=u.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var f=r.mode={},l=n.BlockCipherMode=i.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),p=f.CBC=function(){var t=l.extend();function r(t,r,n){var i,o=this._iv;o?(i=o,this._iv=e):i=this._prevBlock;for(var s=0;s<n;s++)t[r+s]^=i[s]}return t.Encryptor=t.extend({processBlock:function(t,e){var n=this._cipher,i=n.blockSize;r.call(this,t,e,i),n.encryptBlock(t,e),this._prevBlock=t.slice(e,e+i)}}),t.Decryptor=t.extend({processBlock:function(t,e){var n=this._cipher,i=n.blockSize,o=t.slice(e,e+i);n.decryptBlock(t,e),r.call(this,t,e,i),this._prevBlock=o}}),t}(),d=(r.pad={}).Pkcs7={pad:function(t,e){for(var r=4*e,n=r-t.sigBytes%r,i=n<<24|n<<16|n<<8|n,s=[],a=0;a<n;a+=4)s.push(i);var c=o.create(s,n);t.concat(c)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}};n.BlockCipher=u.extend({cfg:u.cfg.extend({mode:p,padding:d}),reset:function(){var t;u.reset.call(this);var e=this.cfg,r=e.iv,n=e.mode;this._xformMode==this._ENC_XFORM_MODE?t=n.createEncryptor:(t=n.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==t?this._mode.init(this,r&&r.words):(this._mode=t.call(n,this,r&&r.words),this._mode.__creator=t)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),t=this._process(!0)):(t=this._process(!0),e.unpad(t)),t},blockSize:4});var y=n.CipherParams=i.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}}),g=(r.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,r=t.salt;return(r?o.create([1398893684,1701076831]).concat(r).concat(e):e).toString(c)},parse:function(t){var e,r=c.parse(t),n=r.words;return 1398893684==n[0]&&1701076831==n[1]&&(e=o.create(n.slice(2,4)),n.splice(0,4),r.sigBytes-=16),y.create({ciphertext:r,salt:e})}},v=n.SerializableCipher=i.extend({cfg:i.extend({format:g}),encrypt:function(t,e,r,n){n=this.cfg.extend(n);var i=t.createEncryptor(r,n),o=i.finalize(e),s=i.cfg;return y.create({ciphertext:o,key:r,iv:s.iv,algorithm:t,mode:s.mode,padding:s.padding,blockSize:t.blockSize,formatter:n.format})},decrypt:function(t,e,r,n){return n=this.cfg.extend(n),e=this._parse(e,n.format),t.createDecryptor(r,n).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),_=(r.kdf={}).OpenSSL={execute:function(t,e,r,n){n||(n=o.random(8));var i=h.create({keySize:e+r}).compute(t,n),s=o.create(i.words.slice(e),4*r);return i.sigBytes=4*e,y.create({key:i,iv:s,salt:n})}},w=n.PasswordBasedCipher=v.extend({cfg:v.cfg.extend({kdf:_}),encrypt:function(t,e,r,n){var i=(n=this.cfg.extend(n)).kdf.execute(r,t.keySize,t.ivSize);n.iv=i.iv;var o=v.encrypt.call(this,t,e,i.key,n);return o.mixIn(i),o},decrypt:function(t,e,r,n){n=this.cfg.extend(n),e=this._parse(e,n.format);var i=n.kdf.execute(r,t.keySize,t.ivSize,e.salt);return n.iv=i.iv,v.decrypt.call(this,t,e,i.key,n)}})}()}(Vt(),Oe())),Le.exports}var Ke,Ne={exports:{}};function We(){return Ke||(Ke=1,Ne.exports=function(t){return t.mode.CFB=function(){var e=t.lib.BlockCipherMode.extend();function r(t,e,r,n){var i,o=this._iv;o?(i=o.slice(0),this._iv=void 0):i=this._prevBlock,n.encryptBlock(i,0);for(var s=0;s<r;s++)t[e+s]^=i[s]}return e.Encryptor=e.extend({processBlock:function(t,e){var n=this._cipher,i=n.blockSize;r.call(this,t,e,i,n),this._prevBlock=t.slice(e,e+i)}}),e.Decryptor=e.extend({processBlock:function(t,e){var n=this._cipher,i=n.blockSize,o=t.slice(e,e+i);r.call(this,t,e,i,n),this._prevBlock=o}}),e}(),t.mode.CFB}(Vt(),Ye())),Ne.exports}var je,Xe={exports:{}};function Ze(){return je||(je=1,Xe.exports=function(t){return t.mode.CTR=(e=t.lib.BlockCipherMode.extend(),r=e.Encryptor=e.extend({processBlock:function(t,e){var r=this._cipher,n=r.blockSize,i=this._iv,o=this._counter;i&&(o=this._counter=i.slice(0),this._iv=void 0);var s=o.slice(0);r.encryptBlock(s,0),o[n-1]=o[n-1]+1|0;for(var a=0;a<n;a++)t[e+a]^=s[a]}}),e.Decryptor=r,e),t.mode.CTR;var e,r}(Vt(),Ye())),Xe.exports}var Ve,qe={exports:{}};function Ge(){return Ve||(Ve=1,qe.exports=function(t){
/** @preserve
				 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
				 * derived from CryptoJS.mode.CTR
				 * Jan Hruby jhruby.web@gmail.com
				 */
return t.mode.CTRGladman=function(){var e=t.lib.BlockCipherMode.extend();function r(t){if(255==(t>>24&255)){var e=t>>16&255,r=t>>8&255,n=255&t;255===e?(e=0,255===r?(r=0,255===n?n=0:++n):++r):++e,t=0,t+=e<<16,t+=r<<8,t+=n}else t+=1<<24;return t}function n(t){return 0===(t[0]=r(t[0]))&&(t[1]=r(t[1])),t}var i=e.Encryptor=e.extend({processBlock:function(t,e){var r=this._cipher,i=r.blockSize,o=this._iv,s=this._counter;o&&(s=this._counter=o.slice(0),this._iv=void 0),n(s);var a=s.slice(0);r.encryptBlock(a,0);for(var c=0;c<i;c++)t[e+c]^=a[c]}});return e.Decryptor=i,e}(),t.mode.CTRGladman}(Vt(),Ye())),qe.exports}var Je,$e={exports:{}};function Qe(){return Je||(Je=1,$e.exports=function(t){return t.mode.OFB=(e=t.lib.BlockCipherMode.extend(),r=e.Encryptor=e.extend({processBlock:function(t,e){var r=this._cipher,n=r.blockSize,i=this._iv,o=this._keystream;i&&(o=this._keystream=i.slice(0),this._iv=void 0),r.encryptBlock(o,0);for(var s=0;s<n;s++)t[e+s]^=o[s]}}),e.Decryptor=r,e),t.mode.OFB;var e,r}(Vt(),Ye())),$e.exports}var tr,er={exports:{}};var rr,nr={exports:{}};var ir,or={exports:{}};var sr,ar={exports:{}};var cr,hr={exports:{}};var ur,fr={exports:{}};var lr,pr={exports:{}};var dr,yr={exports:{}};var gr,vr={exports:{}};function _r(){return gr||(gr=1,vr.exports=function(t){return function(){var e=t,r=e.lib,n=r.WordArray,i=r.BlockCipher,o=e.algo,s=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],a=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],c=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],h=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],u=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],f=o.DES=i.extend({_doReset:function(){for(var t=this._key.words,e=[],r=0;r<56;r++){var n=s[r]-1;e[r]=t[n>>>5]>>>31-n%32&1}for(var i=this._subKeys=[],o=0;o<16;o++){var h=i[o]=[],u=c[o];for(r=0;r<24;r++)h[r/6|0]|=e[(a[r]-1+u)%28]<<31-r%6,h[4+(r/6|0)]|=e[28+(a[r+24]-1+u)%28]<<31-r%6;for(h[0]=h[0]<<1|h[0]>>>31,r=1;r<7;r++)h[r]=h[r]>>>4*(r-1)+3;h[7]=h[7]<<5|h[7]>>>27}var f=this._invSubKeys=[];for(r=0;r<16;r++)f[r]=i[15-r]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,r){this._lBlock=t[e],this._rBlock=t[e+1],l.call(this,4,252645135),l.call(this,16,65535),p.call(this,2,858993459),p.call(this,8,16711935),l.call(this,1,1431655765);for(var n=0;n<16;n++){for(var i=r[n],o=this._lBlock,s=this._rBlock,a=0,c=0;c<8;c++)a|=h[c][((s^i[c])&u[c])>>>0];this._lBlock=s,this._rBlock=o^a}var f=this._lBlock;this._lBlock=this._rBlock,this._rBlock=f,l.call(this,1,1431655765),p.call(this,8,16711935),p.call(this,2,858993459),l.call(this,16,65535),l.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function l(t,e){var r=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=r,this._lBlock^=r<<t}function p(t,e){var r=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=r,this._rBlock^=r<<t}e.DES=i._createHelper(f);var d=o.TripleDES=i.extend({_doReset:function(){var t=this._key.words;if(2!==t.length&&4!==t.length&&t.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=t.slice(0,2),r=t.length<4?t.slice(0,2):t.slice(2,4),i=t.length<6?t.slice(0,2):t.slice(4,6);this._des1=f.createEncryptor(n.create(e)),this._des2=f.createEncryptor(n.create(r)),this._des3=f.createEncryptor(n.create(i))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});e.TripleDES=i._createHelper(d)}(),t.TripleDES}(Vt(),se(),le(),Oe(),Ye())),vr.exports}var wr,Br={exports:{}};var br,mr={exports:{}};var xr,Ar={exports:{}};jt.exports=function(t){return t}(Vt(),Jt(),te(),ne(),se(),he(),le(),ye(),_e(),we||(we=1,Be.exports=function(t){return r=(e=t).lib.WordArray,n=e.algo,i=n.SHA256,o=n.SHA224=i.extend({_doReset:function(){this._hash=new r.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=i._doFinalize.call(this);return t.sigBytes-=4,t}}),e.SHA224=i._createHelper(o),e.HmacSHA224=i._createHmacHelper(o),t.SHA224;var e,r,n,i,o}(Vt(),_e())),xe(),Ae||(Ae=1,Se.exports=function(t){return r=(e=t).x64,n=r.Word,i=r.WordArray,o=e.algo,s=o.SHA512,a=o.SHA384=s.extend({_doReset:function(){this._hash=new i.init([new n.init(3418070365,3238371032),new n.init(1654270250,914150663),new n.init(2438529370,812702999),new n.init(355462360,4144912697),new n.init(1731405415,4290775857),new n.init(2394180231,1750603025),new n.init(3675008525,1694076839),new n.init(1203062813,3204075428)])},_doFinalize:function(){var t=s._doFinalize.call(this);return t.sigBytes-=16,t}}),e.SHA384=s._createHelper(a),e.HmacSHA384=s._createHmacHelper(a),t.SHA384;var e,r,n,i,o,s,a}(Vt(),Jt(),xe())),Re(),Pe||(Pe=1,Ce.exports=function(t){
/** @preserve
				(c) 2012 by Cédric Mesnil. All rights reserved.

				Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

				    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
				    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

				THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*/
return function(e){var r=t,n=r.lib,i=n.WordArray,o=n.Hasher,s=r.algo,a=i.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),c=i.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),h=i.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),u=i.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),f=i.create([0,1518500249,1859775393,2400959708,2840853838]),l=i.create([1352829926,1548603684,1836072691,2053994217,0]),p=s.RIPEMD160=o.extend({_doReset:function(){this._hash=i.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=0;r<16;r++){var n=e+r,i=t[n];t[n]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var o,s,p,B,b,m,x,A,S,E,k,R=this._hash.words,P=f.words,C=l.words,H=a.words,z=c.words,T=h.words,D=u.words;for(m=o=R[0],x=s=R[1],A=p=R[2],S=B=R[3],E=b=R[4],r=0;r<80;r+=1)k=o+t[e+H[r]]|0,k+=r<16?d(s,p,B)+P[0]:r<32?y(s,p,B)+P[1]:r<48?g(s,p,B)+P[2]:r<64?v(s,p,B)+P[3]:_(s,p,B)+P[4],k=(k=w(k|=0,T[r]))+b|0,o=b,b=B,B=w(p,10),p=s,s=k,k=m+t[e+z[r]]|0,k+=r<16?_(x,A,S)+C[0]:r<32?v(x,A,S)+C[1]:r<48?g(x,A,S)+C[2]:r<64?y(x,A,S)+C[3]:d(x,A,S)+C[4],k=(k=w(k|=0,D[r]))+E|0,m=E,E=S,S=w(A,10),A=x,x=k;k=R[1]+p+S|0,R[1]=R[2]+B+E|0,R[2]=R[3]+b+m|0,R[3]=R[4]+o+x|0,R[4]=R[0]+s+A|0,R[0]=k},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,n=8*t.sigBytes;e[n>>>5]|=128<<24-n%32,e[14+(n+64>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(e.length+1),this._process();for(var i=this._hash,o=i.words,s=0;s<5;s++){var a=o[s];o[s]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}return i},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});function d(t,e,r){return t^e^r}function y(t,e,r){return t&e|~t&r}function g(t,e,r){return(t|~e)^r}function v(t,e,r){return t&r|e&~r}function _(t,e,r){return t^(e|~r)}function w(t,e){return t<<e|t>>>32-e}r.RIPEMD160=o._createHelper(p),r.HmacRIPEMD160=o._createHmacHelper(p)}(),t.RIPEMD160}(Vt())),Te(),De||(De=1,Me.exports=function(t){return n=(r=(e=t).lib).Base,i=r.WordArray,s=(o=e.algo).SHA1,a=o.HMAC,c=o.PBKDF2=n.extend({cfg:n.extend({keySize:4,hasher:s,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var r=this.cfg,n=a.create(r.hasher,t),o=i.create(),s=i.create([1]),c=o.words,h=s.words,u=r.keySize,f=r.iterations;c.length<u;){var l=n.update(e).finalize(s);n.reset();for(var p=l.words,d=p.length,y=l,g=1;g<f;g++){y=n.finalize(y),n.reset();for(var v=y.words,_=0;_<d;_++)p[_]^=v[_]}o.concat(l),h[0]++}return o.sigBytes=4*u,o}}),e.PBKDF2=function(t,e,r){return c.create(r).compute(t,e)},t.PBKDF2;var e,r,n,i,o,s,a,c}(Vt(),ye(),Te())),Oe(),Ye(),We(),Ze(),Ge(),Qe(),tr||(tr=1,er.exports=function(t){return t.mode.ECB=((e=t.lib.BlockCipherMode.extend()).Encryptor=e.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),e.Decryptor=e.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),e),t.mode.ECB;var e}(Vt(),Ye())),rr||(rr=1,nr.exports=function(t){return t.pad.AnsiX923={pad:function(t,e){var r=t.sigBytes,n=4*e,i=n-r%n,o=r+i-1;t.clamp(),t.words[o>>>2]|=i<<24-o%4*8,t.sigBytes+=i},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},t.pad.Ansix923}(Vt(),Ye())),ir||(ir=1,or.exports=function(t){return t.pad.Iso10126={pad:function(e,r){var n=4*r,i=n-e.sigBytes%n;e.concat(t.lib.WordArray.random(i-1)).concat(t.lib.WordArray.create([i<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},t.pad.Iso10126}(Vt(),Ye())),sr||(sr=1,ar.exports=function(t){return t.pad.Iso97971={pad:function(e,r){e.concat(t.lib.WordArray.create([2147483648],1)),t.pad.ZeroPadding.pad(e,r)},unpad:function(e){t.pad.ZeroPadding.unpad(e),e.sigBytes--}},t.pad.Iso97971}(Vt(),Ye())),cr||(cr=1,hr.exports=function(t){return t.pad.ZeroPadding={pad:function(t,e){var r=4*e;t.clamp(),t.sigBytes+=r-(t.sigBytes%r||r)},unpad:function(t){var e=t.words,r=t.sigBytes-1;for(r=t.sigBytes-1;r>=0;r--)if(e[r>>>2]>>>24-r%4*8&255){t.sigBytes=r+1;break}}},t.pad.ZeroPadding}(Vt(),Ye())),ur||(ur=1,fr.exports=function(t){return t.pad.NoPadding={pad:function(){},unpad:function(){}},t.pad.NoPadding}(Vt(),Ye())),lr||(lr=1,pr.exports=function(t){return r=(e=t).lib.CipherParams,n=e.enc.Hex,e.format.Hex={stringify:function(t){return t.ciphertext.toString(n)},parse:function(t){var e=n.parse(t);return r.create({ciphertext:e})}},t.format.Hex;var e,r,n}(Vt(),Ye())),dr||(dr=1,yr.exports=function(t){return function(){var e=t,r=e.lib.BlockCipher,n=e.algo,i=[],o=[],s=[],a=[],c=[],h=[],u=[],f=[],l=[],p=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;var r=0,n=0;for(e=0;e<256;e++){var d=n^n<<1^n<<2^n<<3^n<<4;d=d>>>8^255&d^99,i[r]=d,o[d]=r;var y=t[r],g=t[y],v=t[g],_=257*t[d]^16843008*d;s[r]=_<<24|_>>>8,a[r]=_<<16|_>>>16,c[r]=_<<8|_>>>24,h[r]=_,_=16843009*v^65537*g^257*y^16843008*r,u[d]=_<<24|_>>>8,f[d]=_<<16|_>>>16,l[d]=_<<8|_>>>24,p[d]=_,r?(r=y^t[t[t[v^y]]],n^=t[t[n]]):r=n=1}}();var d=[0,1,2,4,8,16,32,64,128,27,54],y=n.AES=r.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,r=t.sigBytes/4,n=4*((this._nRounds=r+6)+1),o=this._keySchedule=[],s=0;s<n;s++)s<r?o[s]=e[s]:(h=o[s-1],s%r?r>6&&s%r==4&&(h=i[h>>>24]<<24|i[h>>>16&255]<<16|i[h>>>8&255]<<8|i[255&h]):(h=i[(h=h<<8|h>>>24)>>>24]<<24|i[h>>>16&255]<<16|i[h>>>8&255]<<8|i[255&h],h^=d[s/r|0]<<24),o[s]=o[s-r]^h);for(var a=this._invKeySchedule=[],c=0;c<n;c++){if(s=n-c,c%4)var h=o[s];else h=o[s-4];a[c]=c<4||s<=4?h:u[i[h>>>24]]^f[i[h>>>16&255]]^l[i[h>>>8&255]]^p[i[255&h]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,s,a,c,h,i)},decryptBlock:function(t,e){var r=t[e+1];t[e+1]=t[e+3],t[e+3]=r,this._doCryptBlock(t,e,this._invKeySchedule,u,f,l,p,o),r=t[e+1],t[e+1]=t[e+3],t[e+3]=r},_doCryptBlock:function(t,e,r,n,i,o,s,a){for(var c=this._nRounds,h=t[e]^r[0],u=t[e+1]^r[1],f=t[e+2]^r[2],l=t[e+3]^r[3],p=4,d=1;d<c;d++){var y=n[h>>>24]^i[u>>>16&255]^o[f>>>8&255]^s[255&l]^r[p++],g=n[u>>>24]^i[f>>>16&255]^o[l>>>8&255]^s[255&h]^r[p++],v=n[f>>>24]^i[l>>>16&255]^o[h>>>8&255]^s[255&u]^r[p++],_=n[l>>>24]^i[h>>>16&255]^o[u>>>8&255]^s[255&f]^r[p++];h=y,u=g,f=v,l=_}y=(a[h>>>24]<<24|a[u>>>16&255]<<16|a[f>>>8&255]<<8|a[255&l])^r[p++],g=(a[u>>>24]<<24|a[f>>>16&255]<<16|a[l>>>8&255]<<8|a[255&h])^r[p++],v=(a[f>>>24]<<24|a[l>>>16&255]<<16|a[h>>>8&255]<<8|a[255&u])^r[p++],_=(a[l>>>24]<<24|a[h>>>16&255]<<16|a[u>>>8&255]<<8|a[255&f])^r[p++],t[e]=y,t[e+1]=g,t[e+2]=v,t[e+3]=_},keySize:8});e.AES=r._createHelper(y)}(),t.AES}(Vt(),se(),le(),Oe(),Ye())),_r(),wr||(wr=1,Br.exports=function(t){return function(){var e=t,r=e.lib.StreamCipher,n=e.algo,i=n.RC4=r.extend({_doReset:function(){for(var t=this._key,e=t.words,r=t.sigBytes,n=this._S=[],i=0;i<256;i++)n[i]=i;i=0;for(var o=0;i<256;i++){var s=i%r,a=e[s>>>2]>>>24-s%4*8&255;o=(o+n[i]+a)%256;var c=n[i];n[i]=n[o],n[o]=c}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=o.call(this)},keySize:8,ivSize:0});function o(){for(var t=this._S,e=this._i,r=this._j,n=0,i=0;i<4;i++){r=(r+t[e=(e+1)%256])%256;var o=t[e];t[e]=t[r],t[r]=o,n|=t[(t[e]+t[r])%256]<<24-8*i}return this._i=e,this._j=r,n}e.RC4=r._createHelper(i);var s=n.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var t=this.cfg.drop;t>0;t--)o.call(this)}});e.RC4Drop=r._createHelper(s)}(),t.RC4}(Vt(),se(),le(),Oe(),Ye())),br||(br=1,mr.exports=function(t){return function(){var e=t,r=e.lib.StreamCipher,n=e.algo,i=[],o=[],s=[],a=n.Rabbit=r.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,r=0;r<4;r++)t[r]=16711935&(t[r]<<8|t[r]>>>24)|4278255360&(t[r]<<24|t[r]>>>8);var n=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],i=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];for(this._b=0,r=0;r<4;r++)c.call(this);for(r=0;r<8;r++)i[r]^=n[r+4&7];if(e){var o=e.words,s=o[0],a=o[1],h=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),u=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),f=h>>>16|4294901760&u,l=u<<16|65535&h;for(i[0]^=h,i[1]^=f,i[2]^=u,i[3]^=l,i[4]^=h,i[5]^=f,i[6]^=u,i[7]^=l,r=0;r<4;r++)c.call(this)}},_doProcessBlock:function(t,e){var r=this._X;c.call(this),i[0]=r[0]^r[5]>>>16^r[3]<<16,i[1]=r[2]^r[7]>>>16^r[5]<<16,i[2]=r[4]^r[1]>>>16^r[7]<<16,i[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)i[n]=16711935&(i[n]<<8|i[n]>>>24)|4278255360&(i[n]<<24|i[n]>>>8),t[e+n]^=i[n]},blockSize:4,ivSize:2});function c(){for(var t=this._X,e=this._C,r=0;r<8;r++)o[r]=e[r];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<o[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<o[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<o[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<o[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<o[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<o[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<o[6]>>>0?1:0)|0,this._b=e[7]>>>0<o[7]>>>0?1:0,r=0;r<8;r++){var n=t[r]+e[r],i=65535&n,a=n>>>16,c=((i*i>>>17)+i*a>>>15)+a*a,h=((4294901760&n)*n|0)+((65535&n)*n|0);s[r]=c^h}t[0]=s[0]+(s[7]<<16|s[7]>>>16)+(s[6]<<16|s[6]>>>16)|0,t[1]=s[1]+(s[0]<<8|s[0]>>>24)+s[7]|0,t[2]=s[2]+(s[1]<<16|s[1]>>>16)+(s[0]<<16|s[0]>>>16)|0,t[3]=s[3]+(s[2]<<8|s[2]>>>24)+s[1]|0,t[4]=s[4]+(s[3]<<16|s[3]>>>16)+(s[2]<<16|s[2]>>>16)|0,t[5]=s[5]+(s[4]<<8|s[4]>>>24)+s[3]|0,t[6]=s[6]+(s[5]<<16|s[5]>>>16)+(s[4]<<16|s[4]>>>16)|0,t[7]=s[7]+(s[6]<<8|s[6]>>>24)+s[5]|0}e.Rabbit=r._createHelper(a)}(),t.Rabbit}(Vt(),se(),le(),Oe(),Ye())),xr||(xr=1,Ar.exports=function(t){return function(){var e=t,r=e.lib.StreamCipher,n=e.algo,i=[],o=[],s=[],a=n.RabbitLegacy=r.extend({_doReset:function(){var t=this._key.words,e=this.cfg.iv,r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],n=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];this._b=0;for(var i=0;i<4;i++)c.call(this);for(i=0;i<8;i++)n[i]^=r[i+4&7];if(e){var o=e.words,s=o[0],a=o[1],h=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),u=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),f=h>>>16|4294901760&u,l=u<<16|65535&h;for(n[0]^=h,n[1]^=f,n[2]^=u,n[3]^=l,n[4]^=h,n[5]^=f,n[6]^=u,n[7]^=l,i=0;i<4;i++)c.call(this)}},_doProcessBlock:function(t,e){var r=this._X;c.call(this),i[0]=r[0]^r[5]>>>16^r[3]<<16,i[1]=r[2]^r[7]>>>16^r[5]<<16,i[2]=r[4]^r[1]>>>16^r[7]<<16,i[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)i[n]=16711935&(i[n]<<8|i[n]>>>24)|4278255360&(i[n]<<24|i[n]>>>8),t[e+n]^=i[n]},blockSize:4,ivSize:2});function c(){for(var t=this._X,e=this._C,r=0;r<8;r++)o[r]=e[r];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<o[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<o[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<o[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<o[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<o[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<o[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<o[6]>>>0?1:0)|0,this._b=e[7]>>>0<o[7]>>>0?1:0,r=0;r<8;r++){var n=t[r]+e[r],i=65535&n,a=n>>>16,c=((i*i>>>17)+i*a>>>15)+a*a,h=((4294901760&n)*n|0)+((65535&n)*n|0);s[r]=c^h}t[0]=s[0]+(s[7]<<16|s[7]>>>16)+(s[6]<<16|s[6]>>>16)|0,t[1]=s[1]+(s[0]<<8|s[0]>>>24)+s[7]|0,t[2]=s[2]+(s[1]<<16|s[1]>>>16)+(s[0]<<16|s[0]>>>16)|0,t[3]=s[3]+(s[2]<<8|s[2]>>>24)+s[1]|0,t[4]=s[4]+(s[3]<<16|s[3]>>>16)+(s[2]<<16|s[2]>>>16)|0,t[5]=s[5]+(s[4]<<8|s[4]>>>24)+s[3]|0,t[6]=s[6]+(s[5]<<16|s[5]>>>16)+(s[4]<<16|s[4]>>>16)|0,t[7]=s[7]+(s[6]<<8|s[6]>>>24)+s[5]|0}e.RabbitLegacy=r._createHelper(a)}(),t.RabbitLegacy}(Vt(),se(),le(),Oe(),Ye())));var Sr=n(jt.exports);function Er(t){if((t=t.slice(0,e.Ed25519.SEED_SIZE)).length!==e.Ed25519.SEED_SIZE)throw new Error("Invalid seed length");const r=new e.Sha512;r.update(t);const n=r.digest();return n[0]&=248,n[31]&=127,n[31]|=64,n.slice(0,32)}const kr=()=>{const t=e.Bip39.randomMnemonic(128),r=e.Bip39.mnemonicToSeed(t).slice(0,e.Ed25519.SEED_SIZE),n=e.Ed25519.privateKeyFromSeed(r);return{secret:r,publicKey:e.Ed25519.publicKeyFromPrivateKey(n)}},Rr=(t,e,r,n="")=>{if(32!==r.length)throw new Error("Receiver public key must be 32 bytes.");const i=Pr(t,r);return yt(Buffer.concat([Buffer.from(e),Buffer.from(i)]),64,{salt:n})},Pr=(t,e)=>{let r=Rt.fromHex(Nt.bytesToHex(e));const n=(i=Er(t),St(Mt(i),vt));var i;return r=r.multiply(n),r.toRawBytes()},Cr=(t,e,r="")=>{const n=Pr(e,t);return yt(Buffer.concat([Buffer.from(t),Buffer.from(n)]),64,{salt:r})},Hr=(t,e)=>{const r=Sr.enc.Utf8.parse(t),{key:n,iv:i}=zr(e);return Sr.AES.encrypt(r,n,{iv:i,mode:Sr.mode.CBC,padding:Sr.pad.Pkcs7}).ciphertext.toString(Sr.enc.Base64)},zr=t=>{const e=Sr.MD5(t).toString(),r=Sr.PBKDF2(e,e,{keySize:16,iterations:1e3}),n=Sr.PBKDF2(r.toString(),r.toString(),{keySize:16,iterations:1e3});return{key:r,iv:n}},Tr=(t,e)=>{const{key:r,iv:n}=zr(e),i=Sr.enc.Base64.parse(t),o=Sr.lib.CipherParams.create({ciphertext:i});return Sr.AES.decrypt(o,r,{iv:n,mode:Sr.mode.CBC,padding:Sr.pad.Pkcs7}).toString(Sr.enc.Utf8)};t.aesDecrypt=Tr,t.aesEncrypt=Hr,t.decapsulate=Cr,t.decrypt=(t,e,r="")=>{const n=e.substring(0,64),i=Nt.hexToBytes(n),o=e.substring(64),s=Nt.bytesToHex(Cr(i,t,r));return{ephemeralPublicKey:i,encrypted:o,aesKey:s,payload:Tr(o,s)}},t.encapsulate=Rr,t.encrypt=(t,e,r="")=>{const{secret:n,publicKey:i}=kr(),o=Nt.bytesToHex(Rr(n,i,t,r)),s=Hr(e,o);return{ephemeralPublicKey:i,aesKey:o,encrypted:s,payload:Nt.bytesToHex(i)+s}},t.getEphemeralSecretAndPublicKey=kr,t.getKeyAndIv=zr,t.prepareBytesForScalar=Er,t.productOfTwo=Pr}(this.eciesEd25519=this.eciesEd25519||{},IotaCrypto);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
