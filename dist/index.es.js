/**
                       * @license
                       * author: 
                       * ecies-ed25519-js.js v0.0.1
                       * Released under the MIT license.
                       */
import e from"futoin-hkdf";import{Ed25519 as t,Sha512 as n,Bip39 as r}from"@iota/crypto.js";import s from"crypto-js";
/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */const o=2n**255n-19n,i=2n**252n+27742317777372353535851937790883648493n,c=0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an,a=0x6666666666666666666666666666666666666666666666666666666666666658n,u={a:-1n,d:37095705934669439343138083508754565189542113879843219016388785533085940283555n,p:o,n:i,h:8,Gx:c,Gy:a},l=(e="")=>{throw new Error(e)},d=e=>"string"==typeof e,y=(e,t)=>!(e instanceof Uint8Array)||"number"==typeof t&&t>0&&e.length!==t?l("Uint8Array expected"):e,f=e=>new Uint8Array(e),h=(e,t=o)=>{let n=e%t;return n>=0n?n:t+n},p=e=>e instanceof b?e:l("Point expected");let m;class b{constructor(e,t,n,r){this.ex=e,this.ey=t,this.ez=n,this.et=r}static fromAffine(e){return new b(e.x,e.y,1n,h(e.x*e.y))}static fromHex(e,t=!0){const{d:n}=u;var r,s;s=32;const i=(e=y(d(r=e)?S(r):f(r),s)).slice();i[31]=-129&e[31];const c=E(i);0n===c||(!t||0n<c&&c<o||l("bad y coord 1"),t||0n<c&&c<2n**256n||l("bad y coord 2"));const a=h(c*c),p=h(a-1n),m=h(n*a+1n);let{isValid:g,value:x}=P(p,m);g||l("bad y coordinate 3");const v=1n===(1n&x);return 0!=(128&e[31])!==v&&(x=h(-x)),new b(x,c,1n,h(x*c))}get x(){return this.toAffine().x}get y(){return this.toAffine().y}equals(e){const{ex:t,ey:n,ez:r}=this,{ex:s,ey:o,ez:i}=p(e),c=h(t*i),a=h(s*r),u=h(n*i),l=h(o*r);return c===a&&u===l}is0(){return this.equals(x)}negate(){return new b(h(-this.ex),this.ey,this.ez,h(-this.et))}double(){const{ex:e,ey:t,ez:n}=this,{a:r}=u,s=h(e*e),o=h(t*t),i=h(2n*h(n*n)),c=h(r*s),a=e+t,l=h(h(a*a)-s-o),d=c+o,y=d-i,f=c-o,p=h(l*y),m=h(d*f),g=h(l*f),x=h(y*d);return new b(p,m,x,g)}add(e){const{ex:t,ey:n,ez:r,et:s}=this,{ex:o,ey:i,ez:c,et:a}=p(e),{a:l,d:d}=u,y=h(t*o),f=h(n*i),m=h(s*d*a),g=h(r*c),x=h((t+n)*(o+i)-y-f),v=h(g-m),B=h(g+m),S=h(f-l*y),w=h(x*v),E=h(B*S),A=h(x*S),T=h(v*B);return new b(w,E,T,A)}mul(e,t=!0){if(0n===e)return!0===t?l("cannot multiply by 0"):x;if("bigint"==typeof e&&0n<e&&e<i||l("invalid scalar, must be < L"),!t&&this.is0()||1n===e)return this;if(this.equals(g))return _(e).p;let n=x,r=g;for(let s=this;e>0n;s=s.double(),e>>=1n)1n&e?n=n.add(s):t&&(r=r.add(s));return n}multiply(e){return this.mul(e)}clearCofactor(){return this.mul(BigInt(u.h),!1)}isSmallOrder(){return this.clearCofactor().is0()}isTorsionFree(){let e=this.mul(i/2n,!1).double();return i%2n&&(e=e.add(this)),e.is0()}toAffine(){const{ex:e,ey:t,ez:n}=this;if(this.is0())return{x:0n,y:0n};const r=T(n);return 1n!==h(n*r)&&l("invalid inverse"),{x:h(e*r),y:h(t*r)}}toRawBytes(){const{x:e,y:t}=this.toAffine(),n=w(t);return n[31]|=1n&e?128:0,n}toHex(){return B(this.toRawBytes())}}b.BASE=new b(c,a,1n,h(c*a)),b.ZERO=new b(0n,1n,1n,0n);const{BASE:g,ZERO:x}=b,v=(e,t)=>e.toString(16).padStart(t,"0"),B=e=>Array.from(e).map((e=>v(e,2))).join(""),S=e=>{const t=e.length;(!d(e)||t%2)&&l("hex invalid 1");const n=f(t/2);for(let t=0;t<n.length;t++){const r=2*t,s=e.slice(r,r+2),o=Number.parseInt(s,16);(Number.isNaN(o)||o<0)&&l("hex invalid 2"),n[t]=o}return n},w=e=>S(v(e,64)).reverse(),E=e=>BigInt("0x"+B(f(y(e)).reverse())),A=(...e)=>{const t=f(e.reduce(((e,t)=>e+y(t).length),0));let n=0;return e.forEach((e=>{t.set(e,n),n+=e.length})),t},T=(e,t=o)=>{(0n===e||t<=0n)&&l("no inverse n="+e+" mod="+t);let n=h(e,t),r=t,s=0n,i=1n;for(;0n!==n;){const e=r%n,t=s-i*(r/n);r=n,n=e,s=i,i=t}return 1n===r?h(s,t):l("no inverse")},K=(e,t)=>{let n=e;for(;t-- >0n;)n*=n,n%=o;return n},z=19681161376707505956807079304988542015446066515923890162744021073123829784752n,P=(e,t)=>{const n=h(t*t*t),r=(e=>{const t=e*e%o*e%o,n=K(t,2n)*t%o,r=K(n,1n)*e%o,s=K(r,5n)*r%o,i=K(s,10n)*s%o,c=K(i,20n)*i%o,a=K(c,40n)*c%o,u=K(a,80n)*a%o,l=K(u,80n)*a%o,d=K(l,10n)*s%o;return{pow_p_5_8:K(d,2n)*e%o,b2:t}})(e*h(n*n*t)).pow_p_5_8;let s=h(e*n*r);const i=h(t*s*s),c=s,a=h(s*z),u=i===e,l=i===h(-e),d=i===h(-e*z);return u&&(s=c),(l||d)&&(s=a),1n===(1n&h(s))&&(s=h(-s)),{isValid:u||l,value:s}};let k;const H=()=>"object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,I={bytesToHex:B,hexToBytes:S,concatBytes:A,mod:h,invert:T,randomBytes:e=>{const t=H();return t||l("crypto.getRandomValues must be defined"),t.getRandomValues(f(e))},sha512Async:async(...e)=>{const t=H();t||l("crypto.subtle or etc.sha512Async must be defined");const n=A(...e);return f(await t.subtle.digest("SHA-512",n.buffer))},sha512Sync:void 0};Object.defineProperties(I,{sha512Sync:{configurable:!1,get:()=>k,set(e){k||(k=e)}}});const _=e=>{const t=m||(m=(()=>{const e=[];let t=g,n=t;for(let r=0;r<33;r++){n=t,e.push(n);for(let r=1;r<128;r++)n=n.add(t),e.push(n);t=n.double()}return e})()),n=(e,t)=>{let n=t.negate();return e?n:t};let r=x,s=g;const o=BigInt(255),i=BigInt(8);for(let c=0;c<33;c++){const a=128*c;let u=Number(e&o);e>>=i,u>128&&(u-=256,e+=1n);const l=a,d=a+Math.abs(u)-1,y=c%2!=0,f=u<0;0===u?s=s.add(n(y,t[l])):r=r.add(n(f,t[d]))}return{p:r,f:s}};function R(e){if((e=e.slice(0,t.SEED_SIZE)).length!==t.SEED_SIZE)throw new Error("Invalid seed length");const r=new n;r.update(e);const s=r.digest();return s[0]&=248,s[31]&=127,s[31]|=64,s.slice(0,32)}const C=()=>{const e=r.randomMnemonic(128),n=r.mnemonicToSeed(e).slice(0,t.SEED_SIZE),s=t.privateKeyFromSeed(n);return{secret:n,publicKey:t.publicKeyFromPrivateKey(s)}},D=(t,n,r,s="")=>{if(32!==r.length)throw new Error("Receiver public key must be 32 bytes.");const o=j(t,r);return e(Buffer.concat([Buffer.from(n),Buffer.from(o)]),64,{salt:s})},j=(e,t)=>{let n=b.fromHex(I.bytesToHex(t));const r=(s=R(e),h(E(s),i));var s;return n=n.multiply(r),n.toRawBytes()},F=(t,n,r="")=>{const s=j(n,t);return e(Buffer.concat([Buffer.from(t),Buffer.from(s)]),64,{salt:r})},N=(e,t,n="")=>{const{secret:r,publicKey:s}=C(),o=I.bytesToHex(D(r,s,e,n)),i=U(t,o);return{ephemeralPublicKey:s,aesKey:o,encrypted:i,payload:I.bytesToHex(s)+i}},U=(e,t)=>{const n=s.enc.Utf8.parse(e),{key:r,iv:o}=O(t);return s.AES.encrypt(n,r,{iv:o,mode:s.mode.CBC,padding:s.pad.Pkcs7}).ciphertext.toString(s.enc.Base64)},Z=(e,t,n="")=>{const r=t.substring(0,64),s=I.hexToBytes(r),o=t.substring(64),i=I.bytesToHex(F(s,e,n));return{ephemeralPublicKey:s,encrypted:o,aesKey:i,payload:V(o,i)}},O=e=>{const t=s.MD5(e).toString(),n=s.PBKDF2(t,t,{keySize:16,iterations:1e3}),r=s.PBKDF2(n.toString(),n.toString(),{keySize:16,iterations:1e3});return{key:n,iv:r}},V=(e,t)=>{const{key:n,iv:r}=O(t),o=s.enc.Base64.parse(e),i=s.lib.CipherParams.create({ciphertext:o});return s.AES.decrypt(i,n,{iv:r,mode:s.mode.CBC,padding:s.pad.Pkcs7}).toString(s.enc.Utf8)};export{V as aesDecrypt,U as aesEncrypt,F as decapsulate,Z as decrypt,D as encapsulate,N as encrypt,C as getEphemeralSecretAndPublicKey,O as getKeyAndIv,R as prepareBytesForScalar,j as productOfTwo};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
